/*! For license information please see circliful.js.LICENSE.txt */
var circliful=function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/dist/",r(r.s="./src/index.ts")}({"./src/base-classes/base-circle.ts":function(t,e,r){"use strict";r.r(e),r.d(e,"BaseCircle",(function(){return s}));var n=r("./src/svg-tags.ts"),i=function(){return(i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},s=function(){function t(t,e){var r=this;this.tags=[],this.animateInView=function(){r.options.animateInView&&window.addEventListener("scroll",(function(){r.checkAnimation(r.options.id)}))},this.checkAnimation=function(t){var e=document.getElementById(t),n=document.getElementById("arc-"+t),i=r.isElementInViewport(e);!e.classList.contains("reanimated")&&i&&(e.classList.add("reanimated"),setTimeout((function(){return r.animate(n)}),250))},this.isElementInViewport=function(t){var e=t.offsetTop,r=window.scrollY,n=window.innerHeight;return r<e&&r+n>e},this.drawContainer=function(t){var e=r.getViewBoxParams(),s=e.minX,o=e.minY,a=e.width,c=e.height,d=n.default.addSvg(i({width:r.size.width,height:r.size.height,viewBox:s+" "+o+" "+a+" "+c,id:"svg-"+r.options.id},t));r.tags.push({element:d,parentId:r.options.id})},this.append=function(){r.tags.forEach((function(t){document.getElementById(t.parentId).appendChild(t.element)}))},this.options=t,this.size=e}return t.prototype.getViewBoxParams=function(){var t=this.options,e=t.foregroundCircleWidth,r=t.backgroundCircleWidth,n=r;e>r&&(n=e);var i=0,s=0,o=this.size.width,a=this.size.height;return(e>5||r>5)&&(i=-n/1.5,s=-n/1.5,o=this.size.width+1.5*n,a=this.size.height+1.5*n),{minX:i,minY:s,width:o,height:a}},t}()},"./src/circle-type eager recursive ^\\.\\/.*$":function(t,e,r){var n={"./half-circle":"./src/circle-type/half-circle.ts","./half-circle.ts":"./src/circle-type/half-circle.ts","./plain-circle":"./src/circle-type/plain-circle.ts","./plain-circle.ts":"./src/circle-type/plain-circle.ts","./simple-circle":"./src/circle-type/simple-circle.ts","./simple-circle.ts":"./src/circle-type/simple-circle.ts"};function i(t){return s(t).then(r)}function s(t){return Promise.resolve().then((function(){if(!r.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}))}i.keys=function(){return Object.keys(n)},i.resolve=s,i.id="./src/circle-type eager recursive ^\\.\\/.*$",t.exports=i},"./src/circle-type/half-circle.ts":function(t,e,r){"use strict";r.r(e);var n,i=r("./src/helpers/object-helper.ts"),s=r("./src/helpers/svg-tags-helper.ts"),o=r("./src/svg-tags.ts"),a=r("./src/circle-type/simple-circle.ts"),c=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.drawCircle=function(){var t={class:i.default.extractPropertyFromObject(n.additionalCssClasses,"svgContainer")};n.drawContainer(t),n.drawBackgroundCircle(),n.drawForegroundCircle(),n.drawText(),n.append()},n.drawBackgroundCircle=function(){var t=i.default.extractPropertyFromObject(n.additionalCssClasses,"backgroundCircle"),e=o.default.addArc({id:"arc-"+n.options.id,d:s.default.describeArc(n.coordinates.x,n.coordinates.y,n.radius,270,90),class:"background-circle "+t,"stroke-width":n.options.backgroundCircleWidth});n.tags.push({element:e,parentId:"svg-"+n.options.id})},n.drawForegroundCircle=function(){var t=1.8*n.options.percent,e=i.default.extractPropertyFromObject(n.additionalCssClasses,"foregroundCircle"),r=o.default.addArc({id:"arc-"+n.options.id,class:"foreground-circle "+e,d:s.default.describeArc(n.coordinates.x,n.coordinates.y,n.radius,0,t),transform:"rotate(-90, "+n.coordinates.x+", "+n.coordinates.y+")","stroke-width":n.options.foregroundCircleWidth});n.options.animation&&n.animate(r),n.tags.push({element:r,parentId:"svg-"+n.options.id})},n}return c(e,t),e.prototype.animate=function(t){s.default.animateArc({arc:t,arcParams:{percent:this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius,endAngleGrade:180},animationStep:this.options.animationStep},this.options.onAnimationEnd)},e}(a.default);e.default=d},"./src/circle-type/plain-circle.ts":function(t,e,r){"use strict";r.r(e);var n,i=r("./src/base-classes/base-circle.ts"),s=r("./src/helpers/object-helper.ts"),o=r("./src/helpers/svg-tags-helper.ts"),a=r("./src/svg-tags.ts"),c=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(e,r){var n=t.call(this,e,r)||this;n.coordinates={x:0,y:0},n.additionalCssClasses={},n.drawCircle=function(){n.drawContainer(),n.drawPlainCircle(),n.append()},n.drawPlainCircle=function(){var t=3.6*n.options.percent,e=s.default.extractPropertyFromObject(n.additionalCssClasses,"foregroundCircle"),r=a.default.addArc({id:"arc-"+n.options.id,class:"foreground-circle "+e,d:o.default.describeArc(n.coordinates.x,n.coordinates.y,n.radius,0,t),"stroke-width":n.options.foregroundCircleWidth});n.options.animation&&n.animate(r),n.tags.push({element:r,parentId:"svg-"+n.options.id})};var i=n.size.maxSize;return n.coordinates={x:i/2,y:i/2},n.radius=i/2.2,n.options.additionalCssClasses&&(n.additionalCssClasses=n.options.additionalCssClasses),n.animateInView(),n}return c(e,t),e.prototype.animate=function(t){o.default.animateArc({arc:t,arcParams:{percent:this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius},animationStep:this.options.animationStep},this.options.onAnimationEnd)},e}(i.BaseCircle);e.default=d},"./src/circle-type/simple-circle.ts":function(t,e,r){"use strict";r.r(e);var n,i=r("./src/base-classes/base-circle.ts"),s=r("./src/helpers/object-helper.ts"),o=r("./src/helpers/svg-tags-helper.ts"),a=r("./src/svg-tags.ts"),c=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(e,r){var n=t.call(this,e,r)||this;n.coordinates={x:0,y:0},n.additionalCssClasses={},n.drawCircle=function(){var t={class:s.default.extractPropertyFromObject(n.additionalCssClasses,"svgContainer")};n.drawContainer(t),n.options.strokeGradient&&n.drawLinearGradient(),n.drawBackgroundCircle(),n.drawForegroundCircle(),n.options.point&&n.drawPoint(),n.options.icon&&n.drawIcon(),n.drawText(),n.options.textBelow&&n.options.text&&n.drawInfoText(),n.append()},n.drawBackgroundCircle=function(){var t=s.default.extractPropertyFromObject(n.additionalCssClasses,"backgroundCircle"),e=a.default.addCircle({id:"circle-"+n.options.id,class:"background-circle "+t,cx:String(n.coordinates.x),cy:String(n.coordinates.y),r:String(n.radius),"stroke-width":n.options.backgroundCircleWidth});n.tags.push({element:e,parentId:"svg-"+n.options.id})},n.drawPoint=function(){var t=n.radius/100*n.options.pointSize,e=s.default.extractPropertyFromObject(n.additionalCssClasses,"point"),r=a.default.addCircle({id:"point-"+n.options.id,class:"point-circle "+e,cx:String(n.coordinates.x),cy:String(n.coordinates.y),r:String(t)});n.tags.push({element:r,parentId:"svg-"+n.options.id})},n.drawForegroundCircle=function(){var t=3.6*n.options.percent,e=s.default.extractPropertyFromObject(n.additionalCssClasses,"foregroundCircle"),r={id:"arc-"+n.options.id,class:"foreground-circle "+e,d:o.default.describeArc(n.coordinates.x,n.coordinates.y,n.radius,0,t),"stroke-width":n.options.foregroundCircleWidth};n.options.strokeGradient&&(r.stroke="url(#linearGradient)",r.class="foreground-circle-without-stroke-color");var i=a.default.addArc(r);n.options.animation&&n.animate(i),n.tags.push({element:i,parentId:"svg-"+n.options.id})},n.drawIcon=function(){var t=n.options.icon,e=s.default.extractPropertyFromObject(n.additionalCssClasses,"icon"),r=a.default.addText({id:"text-"+n.options.id,x:String(n.coordinates.x),y:String(n.coordinates.y-25),class:"circle-icon fa "+e});r.innerHTML="&#x"+t+";",n.tags.push({element:r,parentId:"svg-"+n.options.id})},n.drawText=function(){var t=s.default.extractPropertyFromObject(n.additionalCssClasses,"text"),e=a.default.addText({id:"text-"+n.options.id,x:String(n.coordinates.x),y:String(n.coordinates.y),class:"circle-text "+t}),r=n.options.noPercentageSign?"":"%",i=""+n.options.percent+r;!n.options.textBelow&&n.options.text&&(i=n.options.text),e.textContent=i,n.tags.push({element:e,parentId:"svg-"+n.options.id})},n.drawLinearGradient=function(){var t={};t.gradientStart=n.options.strokeGradient[0],t.gradientEnd=n.options.strokeGradient[1];var e=a.default.addDefs(t);n.tags.push({element:e,parentId:"svg-"+n.options.id})};var i=n.size.maxSize;return n.coordinates={x:i/2,y:i/2},n.radius=i/2.2,n.options.additionalCssClasses&&(n.additionalCssClasses=n.options.additionalCssClasses),n.animateInView(),n}return c(e,t),e.prototype.animate=function(t){o.default.animateArc({arc:t,arcParams:{percent:this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius},animationStep:this.options.animationStep},this.options.onAnimationEnd)},e.prototype.drawInfoText=function(){var t=s.default.extractPropertyFromObject(this.additionalCssClasses,"infoText"),e=a.default.addText({id:"text-"+this.options.id,x:String(this.coordinates.x),y:String(this.coordinates.y+20),class:"circle-info-text "+t});e.textContent=this.options.text,this.tags.push({element:e,parentId:"svg-"+this.options.id})},e}(i.BaseCircle);e.default=d},"./src/circle.ts":function(t,e,r){"use strict";r.r(e);var n=r("./src/options.ts"),i=function(){function t(){}return t.initCircle=function(e){t.getClassInstance(e).then((function(t){t.drawCircle()}))},t.getClassInstance=function(e){var i=t.camelCaseToDash(e.type);return r("./src/circle-type eager recursive ^\\.\\/.*$")("./"+i).then((function(r){var i=(new n.default).mergeOptions(e),s=t.getParentSize(e.id);return new r.default(i,s)}))},t.camelCaseToDash=function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()},t.getParentSize=function(t){var e=document.getElementById(t),r=e.clientWidth>0?e.clientWidth:200,n=e.clientHeight>0?e.clientHeight:200;return{maxSize:r>n?n:r,height:n,width:r}},t}();e.default=i},"./src/helpers/object-helper.ts":function(t,e,r){"use strict";r.r(e);var n=function(){function t(){}return t.extractPropertyFromObject=function(t,e){var r="";return t.hasOwnProperty(e)&&t[e]&&(r=t[e]),r},t}();e.default=n},"./src/helpers/svg-tags-helper.ts":function(t,e,r){"use strict";r.r(e);var n=function(){function t(){}return t.setAttributes=function(t,e){for(var r=0,n=Object.entries(e);r<n.length;r++){var i=n[r],s=i[0],o=i[1];t.setAttribute(s,o)}},t.setAttributeNamespace=function(t,e){for(var r=0,n=Object.entries(e);r<n.length;r++){var i=n[r],s=i[0],o=i[1];t.setAttributeNS(null,s,o)}},t.polarToCartesian=function(t,e,r,n){var i=(n-90)*Math.PI/180;return{x:t+r*Math.cos(i),y:e+r*Math.sin(i)}},t.describeArc=function(e,r,n,i,s){var o=t.polarToCartesian(e,r,n,s),a=t.polarToCartesian(e,r,n,i),c=s-i<=180?"0":"1";return["M",o.x,o.y,"A",n,n,0,c,0,a.x,a.y].join(" ")},t.animateArc=function(e,r){var n=e.arc,i=e.arcParams,s=e.animationStep,o=1,a=i.startAngle?i.startAngle:0,c=i.endAngleGrade?i.endAngleGrade:360,d=this.getMilliseconds(i.ms,i.endAngleGrade),l=setInterval((function(e,r){var n=c/100*o;t.setAttributes(e,{d:t.describeArc(i.x,i.y,i.radius,a,n)}),s>1?o+=s:o++,o>r&&clearInterval(l)}),d,n,i.percent)},t.getMilliseconds=function(t,e){var r=t||50;return e<=180&&(r/=3),r},t}();e.default=n},"./src/index.ts":function(t,e,r){"use strict";r.r(e),r.d(e,"initCircle",(function(){return i}));r("./styles/main.scss");var n=r("./src/circle.ts");function i(t){return n.default.initCircle(t)}},"./src/options.ts":function(t,e,r){"use strict";r.r(e);var n=function(){return(n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=function(){var t=this;this.defaultOptions={point:!1,pointSize:60,percent:75,foregroundCircleWidth:5,backgroundCircleWidth:15,animation:1,animationStep:1,noPercentageSign:!1,animateInView:!1,strokeLinecap:"butt",type:"SimpleCircle",textBelow:!1},this.mergeOptions=function(e){return n(n({},t.defaultOptions),e)}};e.default=i},"./src/svg-tags.ts":function(t,e,r){"use strict";r.r(e);var n=r("./src/helpers/object-helper.ts"),i=r("./src/helpers/svg-tags-helper.ts"),s=function(){function t(){}return t.addSvg=function(e){var r=document.createElementNS(t.namespaceURI,"svg");return e.class="circle-container"+n.default.extractPropertyFromObject(e,"class"),i.default.setAttributes(r,e),r},t.addCircle=function(e){var r=document.createElementNS(t.namespaceURI,"circle");return i.default.setAttributes(r,e),r},t.addArc=function(e){var r=document.createElementNS(t.namespaceURI,"path");return i.default.setAttributes(r,e),r},t.addText=function(e){var r=document.createElementNS(t.namespaceURI,"text");return r.setAttributeNS(null,"text-anchor","middle"),i.default.setAttributes(r,e),r},t.addDefs=function(e){var r=document.createElementNS(t.namespaceURI,"defs"),n=document.createElementNS(t.namespaceURI,"linearGradient");i.default.setAttributes(n,{id:"linearGradient"});var s=document.createElementNS(t.namespaceURI,"stop"),o={offset:"0","stop-color":e.gradientStart};i.default.setAttributes(s,o);var a=document.createElementNS(t.namespaceURI,"stop"),c={offset:"1","stop-color":e.gradientEnd};return i.default.setAttributes(a,c),n.appendChild(s),n.appendChild(a),r.appendChild(n),r},t.namespaceURI="http://www.w3.org/2000/svg",t}();e.default=s},"./styles/main.scss":function(t,e,r){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,