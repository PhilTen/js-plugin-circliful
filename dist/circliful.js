var circliful=function(t){var e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(r,s,function(e){return t[e]}.bind(null,s));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s="./src/index.ts")}({"./src/api.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"Api",(function(){return n}));var r=i("./src/base-class/circle.ts"),s=i("./src/helper/object-helper.ts"),n=function(){function t(t){this.options=t}return t.prototype.update=function(t){var e=this,i=document.getElementById("svg-"+this.options.id);Array.isArray(t)?t.forEach((function(t){return e.updateType(t.type,t.value)})):this.updateType(t.type,t.value),i.innerHTML="",r.default.initializeCircleType(this.options)},t.prototype.updateType=function(t,e){switch(t){case"percent":this.options.percent=Number(e);break;case"point":this.options.point=Boolean(e);break;case"animation":this.options.animation=Boolean(e);break;case"pointSize":this.options.pointSize=Number(e);break;case"animationStep":this.options.animationStep=Number(e);break;case"strokeGradient":this.options.strokeGradient=e;break;case"icon":this.options.icon=String(e);break;case"text":this.options.text=String(e);break;case"textReplacesPercentage":this.options.textReplacesPercentage=Boolean(e);break;case"foregroundCircleWidth":this.options.foregroundCircleWidth=Number(e);break;case"backgroundCircleWidth":this.options.backgroundCircleWidth=Number(e);break;case"additionalCssClasses":this.options.additionalCssClasses=e;break;case"progressColors":this.options.progressColors=e}},t.prototype.get=function(t){return s.default.extractPropertyFromObject(this.options,t)},t}()},"./src/base-class/base-circle.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"BaseCircle",(function(){return n}));var r=i("./src/base-class/svg-tags.ts"),s=function(){return(s=Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)},n=function(){function t(){this.tags=[]}return t.prototype.animateInView=function(){var t=this;this.options.animateInView&&window.addEventListener("scroll",(function(){t.checkAnimation(t.options.id)}))},t.prototype.checkAnimation=function(t){var e=this,i=document.getElementById(t),r=document.getElementById("arc-"+t),s=this.isElementInViewport(i);!i.classList.contains("reanimated")&&s&&(i.classList.add("reanimated"),setTimeout((function(){return e.animate(r)}),250))},t.prototype.isElementInViewport=function(t){var e=t.offsetTop,i=window.scrollY,r=window.innerHeight;return i<e&&i+r>e},t.prototype.drawContainer=function(t){var e=this.getViewBoxParams(),i=e.minX,n=e.minY,o=e.width,a=e.height,c=r.default.addSvg(s({width:"100%",height:"100%",viewBox:i+" "+n+" "+o+" "+a,id:"svg-"+this.options.id,preserveAspectRatio:"xMinYMin meet"},t));this.tags.push({element:c,parentId:this.options.id})},t.prototype.getViewBoxParams=function(){var t=this.options,e=t.foregroundCircleWidth,i=t.backgroundCircleWidth,r=i;e>i&&(r=e);var s=this.size.width,n=this.size.height;return(e>5||i>5)&&(s=this.size.width+1.5*r,n=this.size.height+1.5*r),{minX:0,minY:0,width:s,height:n}},t.prototype.append=function(){this.tags.forEach((function(t){document.getElementById(t.parentId).appendChild(t.element)}))},t.prototype.initialize=function(t,e){this.options=t,this.size=e},t}()},"./src/base-class/circle-factory.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"CircleFactory",(function(){return o}));var r=i("./src/circle-type/half-circle.ts"),s=i("./src/circle-type/plain-circle.ts"),n=i("./src/circle-type/simple-circle.ts"),o=function(){function t(){}return t.create=function(t){var e;switch(t.toLowerCase()){case"half":e=new r.default;break;case"plain":e=new s.default;break;case"simple":e=new n.default;break;default:e=new n.default}return e},t}()},"./src/base-class/circle.ts":function(t,e,i){"use strict";i.r(e);var r=i("./src/api.ts"),s=i("./src/base-class/circle-factory.ts"),n=i("./src/base-class/options.ts"),o=function(){function t(){}return t.getParentSize=function(t){var e=document.getElementById(t),i=e.clientWidth>0?e.clientWidth:200,r=e.clientHeight>0?e.clientHeight:200;return{maxSize:i>r?r:i,height:r,width:i}},t.initializeCircleType=function(e,i){void 0===i&&(i=!1);var r=t.getParentSize(e.id),o=s.CircleFactory.create(e.type),a=(new n.default).mergeOptions(e,i);return o.initialize(a,r),o.drawCircle(),o},t.prototype.newCircle=function(e){return t.initializeCircleType(e),new r.Api(e)},t.prototype.newCircleWithDataSet=function(e,i){var s={id:e,type:i,percent:1};return t.initializeCircleType(s,!0),new r.Api(s)},t}();e.default=o},"./src/base-class/options.ts":function(t,e,i){"use strict";i.r(e);var r=function(){return(r=Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)},s=function(){function t(){this.defaultOptions={point:!1,pointSize:60,percent:75,foregroundCircleWidth:5,backgroundCircleWidth:15,animation:!0,animationStep:1,noPercentageSign:!1,animateInView:!1,strokeLinecap:"butt",type:"SimpleCircle",textReplacesPercentage:!1}}return t.getDataAttributes=function(t){var e=document.getElementById(t.id),i={percent:t.percent};for(var r in e.dataset)if(e.dataset.hasOwnProperty(r)){var s=e.dataset[r];"false"===s||"true"===s?i[r]="true"===s:Number(s)?i[r]=Number(s):i[r]=s}return i},t.prototype.mergeOptions=function(e,i){void 0===i&&(i=!1);var s=r(r({},this.defaultOptions),e);if(i){var n=t.getDataAttributes(e);s=r(r({},s),n)}return s},t}();e.default=s},"./src/base-class/svg-tags.ts":function(t,e,i){"use strict";i.r(e);var r=i("./src/helper/object-helper.ts"),s=i("./src/helper/svg-tags-helper.ts"),n=function(){function t(){}return t.addSvg=function(e){var i=document.createElementNS(t.namespaceURI,"svg");return e.class="circle-container "+r.default.extractPropertyFromObject(e,"class"),s.default.setAttributes(i,e),i},t.addCircle=function(e){var i=document.createElementNS(t.namespaceURI,"circle");return s.default.setAttributes(i,e),i},t.addArc=function(e){var i=document.createElementNS(t.namespaceURI,"path");return s.default.setAttributes(i,e),i},t.addText=function(e){var i=document.createElementNS(t.namespaceURI,"text");return i.setAttributeNS(null,"text-anchor","middle"),s.default.setAttributes(i,e),i},t.addDefs=function(e){var i=document.createElementNS(t.namespaceURI,"defs"),r=document.createElementNS(t.namespaceURI,"linearGradient");s.default.setAttributes(r,{id:"linearGradient"});var n=document.createElementNS(t.namespaceURI,"stop"),o={offset:"0","stop-color":e.gradientStart};s.default.setAttributes(n,o);var a=document.createElementNS(t.namespaceURI,"stop"),c={offset:"1","stop-color":e.gradientEnd};return s.default.setAttributes(a,c),r.appendChild(n),r.appendChild(a),i.appendChild(r),i},t.namespaceURI="http://www.w3.org/2000/svg",t}();e.default=n},"./src/circle-type/half-circle.ts":function(t,e,i){"use strict";i.r(e);var r,s=i("./src/base-class/svg-tags.ts"),n=i("./src/helper/object-helper.ts"),o=i("./src/helper/style-helper.ts"),a=i("./src/helper/svg-tags-helper.ts"),c=i("./src/circle-type/simple-circle.ts"),l=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.drawCircle=function(){var t={class:n.default.extractPropertyFromObject(this.additionalCssClasses,"svgContainer")};this.drawContainer(t),this.drawBackgroundCircle(),this.drawForegroundCircle(),this.drawText(),this.append()},e.prototype.drawBackgroundCircle=function(){var t=n.default.extractPropertyFromObject(this.additionalCssClasses,"backgroundCircle"),e=s.default.addArc({id:"bg-arc-"+this.options.id,d:a.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,270,90),class:"background-circle "+t,"stroke-width":this.options.backgroundCircleWidth});this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawForegroundCircle=function(){var t=1.8*this.options.percent,e=n.default.extractPropertyFromObject(this.additionalCssClasses,"foregroundCircle"),i=s.default.addArc({id:"arc-"+this.options.id,class:"foreground-circle "+e,d:a.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,0,t),transform:"rotate(-90, "+this.coordinates.x+", "+this.coordinates.y+")","stroke-width":this.options.foregroundCircleWidth,"stroke-linecap":this.options.strokeLinecap});this.options.animation&&this.animate(i),this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.animate=function(t){o.StyleHelper.animateArc({arc:t,arcParams:{percent:this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius,endAngleGrade:180},animationStep:this.options.animationStep,progressColors:this.options.progressColors},this.options.onAnimationEnd)},e}(c.default);e.default=d},"./src/circle-type/plain-circle.ts":function(t,e,i){"use strict";i.r(e);var r,s=i("./src/base-class/base-circle.ts"),n=i("./src/base-class/svg-tags.ts"),o=i("./src/helper/object-helper.ts"),a=i("./src/helper/style-helper.ts"),c=i("./src/helper/svg-tags-helper.ts"),l=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.coordinates={x:0,y:0},e.additionalCssClasses={},e}return l(e,t),e.prototype.initialize=function(e,i){t.prototype.initialize.call(this,e,i);var r=this.size.maxSize;this.coordinates={x:r/2,y:r/2},this.radius=r/2.2,this.options.additionalCssClasses&&(this.additionalCssClasses=this.options.additionalCssClasses),this.animateInView()},e.prototype.drawCircle=function(){this.drawContainer(),this.drawPlainCircle(),this.append()},e.prototype.drawPlainCircle=function(){var t=3.6*this.options.percent,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"foregroundCircle"),i=n.default.addArc({id:"arc-"+this.options.id,class:"foreground-circle "+e,d:c.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,0,t),"stroke-width":this.options.foregroundCircleWidth,"stroke-linecap":this.options.strokeLinecap});this.options.animation&&this.animate(i),this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.animate=function(t){a.StyleHelper.animateArc({arc:t,arcParams:{percent:this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius},animationStep:this.options.animationStep,progressColors:this.options.progressColors},this.options.onAnimationEnd)},e}(s.BaseCircle);e.default=d},"./src/circle-type/simple-circle.ts":function(t,e,i){"use strict";i.r(e);var r,s=i("./src/base-class/base-circle.ts"),n=i("./src/base-class/svg-tags.ts"),o=i("./src/helper/object-helper.ts"),a=i("./src/helper/style-helper.ts"),c=i("./src/helper/svg-tags-helper.ts"),l=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.coordinates={x:0,y:0},e.additionalCssClasses={},e}return l(e,t),e.prototype.initialize=function(e,i){t.prototype.initialize.call(this,e,i);var r=this.size.maxSize;this.coordinates={x:r/2,y:r/2},this.radius=r/2.2,this.options.additionalCssClasses&&(this.additionalCssClasses=this.options.additionalCssClasses),this.animateInView()},e.prototype.drawCircle=function(){var t={class:o.default.extractPropertyFromObject(this.additionalCssClasses,"svgContainer")};this.drawContainer(t),this.options.strokeGradient&&this.drawLinearGradient(),this.drawBackgroundCircle(),this.drawForegroundCircle(),this.options.point&&this.drawPoint(),this.options.icon&&this.drawIcon(),this.drawText(),!this.options.textReplacesPercentage&&this.options.text&&this.drawInfoText(),this.append()},e.prototype.drawBackgroundCircle=function(){var t=o.default.extractPropertyFromObject(this.additionalCssClasses,"backgroundCircle"),e=n.default.addCircle({id:"circle-"+this.options.id,class:"background-circle "+t,cx:String(this.coordinates.x),cy:String(this.coordinates.y),r:String(this.radius),"stroke-width":this.options.backgroundCircleWidth});this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawPoint=function(){var t=this.radius/100*this.options.pointSize,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"point"),i=n.default.addCircle({id:"point-"+this.options.id,class:"point-circle "+e,cx:String(this.coordinates.x),cy:String(this.coordinates.y),r:String(t)});this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.drawForegroundCircle=function(){var t=3.6*this.options.percent,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"foregroundCircle"),i={id:"arc-"+this.options.id,class:"foreground-circle "+e,d:c.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,0,t),"stroke-width":this.options.foregroundCircleWidth,"stroke-linecap":this.options.strokeLinecap};this.options.strokeGradient&&(i.stroke="url(#linearGradient)",i.class="foreground-circle-without-stroke-color "+e);var r=n.default.addArc(i);this.options.animation&&this.animate(r),this.tags.push({element:r,parentId:"svg-"+this.options.id})},e.prototype.animate=function(t,e){a.StyleHelper.animateArc({arc:t,arcParams:{percent:e||this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius},animationStep:this.options.animationStep,progressColors:this.options.progressColors},this.options.onAnimationEnd)},e.prototype.drawIcon=function(){var t=this.options.icon,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"icon"),i=n.default.addText({id:"text-"+this.options.id,x:String(this.coordinates.x),y:String(this.coordinates.y-25),class:"circle-icon fa "+e});i.innerHTML="&#x"+t+";",this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.drawText=function(){var t=o.default.extractPropertyFromObject(this.additionalCssClasses,"text"),e=n.default.addText({id:"text-"+this.options.id,x:String(this.coordinates.x),y:String(this.coordinates.y),class:"circle-text "+t}),i=this.options.noPercentageSign?"":"%",r=""+this.options.percent+i;this.options.textReplacesPercentage&&this.options.text&&(r=this.options.text),e.textContent=r,this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawInfoText=function(){var t=o.default.extractPropertyFromObject(this.additionalCssClasses,"infoText"),e=n.default.addText({id:"text-"+this.options.id,x:String(this.coordinates.x),y:String(this.coordinates.y+20),class:"circle-info-text "+t});e.textContent=this.options.text,this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawLinearGradient=function(){var t={};t.gradientStart=this.options.strokeGradient[0],t.gradientEnd=this.options.strokeGradient[1];var e=n.default.addDefs(t);this.tags.push({element:e,parentId:"svg-"+this.options.id})},e}(s.BaseCircle);e.default=d},"./src/helper/object-helper.ts":function(t,e,i){"use strict";i.r(e);var r=function(){function t(){}return t.extractPropertyFromObject=function(t,e){var i;return t.hasOwnProperty(e)&&t[e]&&(i=t[e]),i},t}();e.default=r},"./src/helper/style-helper.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"StyleHelper",(function(){return s}));var r=i("./src/helper/svg-tags-helper.ts"),s=function(){function t(){}return t.animateArc=function(e,i){var s=e.arc,n=e.arcParams,o=e.animationStep,a=e.progressColors,c=n.startAngle?n.startAngle:0,l=n.endAngleGrade?n.endAngleGrade:360,d=this.getMilliseconds(n.ms,n.endAngleGrade),p=Array.isArray(a)&&a.length>0,u=1,h=setInterval((function(e,s,a){var d=l/100*u;r.default.setAttributes(e,{d:r.default.describeArc(n.x,n.y,n.radius,c,d)}),p&&t.updateCircleColor(u,e,a),(u+=o)>s&&(clearInterval(h),"function"==typeof i&&i())}),d,s,n.percent,a)},t.updateCircleColor=function(t,e,i){var s=i.find((function(e){return e.percent===t}));s&&r.default.setAttributes(e,{style:"stroke: "+s.color})},t.getMilliseconds=function(t,e){var i=t||50;return e<=180&&(i/=3),i},t}()},"./src/helper/svg-tags-helper.ts":function(t,e,i){"use strict";i.r(e);var r=function(){function t(){}return t.setAttributes=function(t,e){for(var i=0,r=Object.entries(e);i<r.length;i++){var s=r[i],n=s[0],o=s[1];t.setAttribute(n,o)}},t.setAttributeNamespace=function(t,e){for(var i=0,r=Object.entries(e);i<r.length;i++){var s=r[i],n=s[0],o=s[1];t.setAttributeNS(null,n,o)}},t.polarToCartesian=function(t,e,i,r){var s=(r-90)*Math.PI/180;return{x:t+Math.round(i*Math.cos(s)+Number.EPSILON),y:e+Math.round(i*Math.sin(s)+Number.EPSILON)}},t.describeArc=function(e,i,r,s,n){var o=t.polarToCartesian(e,i,r,n),a=t.polarToCartesian(e,i,r,s),c=n-s<=180?"0":"1";return["M",o.x,o.y,"A",r,r,0,c,0,a.x,a.y].join(" ")},t}();e.default=r},"./src/index.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"newCircle",(function(){return s})),i.d(e,"newCircleWithDataSet",(function(){return n}));i("./style/main.scss");var r=i("./src/base-class/circle.ts");function s(t){return(new r.default).newCircle(t)}function n(t,e){return(new r.default).newCircleWithDataSet(t,e)}},"./style/main.scss":function(t,e,i){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,