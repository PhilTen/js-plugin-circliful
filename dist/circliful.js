var circliful=function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s="./src/index.ts")}({"./src/api.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"Api",(function(){return r}));var s=i("./src/base-classes/circle.ts"),r=function(){function t(t){this.options=t}return t.prototype.update=function(t){var e=this,i=document.getElementById("svg-"+this.options.id);Array.isArray(t)?t.forEach((function(t){return e.updateType(t.type,t.value)})):this.updateType(t.type,t.value),i.innerHTML="",s.default.initializeCircleType(this.options)},t.prototype.updateType=function(t,e){switch(t){case"percent":this.options.percent=Number(e);break;case"point":this.options.point=Boolean(e);break;case"animation":this.options.animation=Boolean(e);break;case"pointSize":this.options.pointSize=Number(e);break;case"animationStep":this.options.animationStep=Number(e);break;case"strokeGradient":this.options.strokeGradient=e;break;case"icon":this.options.icon=String(e);break;case"text":this.options.text=String(e);break;case"textReplacesPercentage":this.options.textReplacesPercentage=Boolean(e);break;case"foregroundCircleWidth":this.options.foregroundCircleWidth=Number(e);break;case"backgroundCircleWidth":this.options.backgroundCircleWidth=Number(e);break;case"additionalCssClasses":this.options.additionalCssClasses=e;break;case"progressColors":console.log("value",e),this.options.progressColors=e}},t.prototype.get=function(t){if(this.options.hasOwnProperty(t))return this.options[t]},t}()},"./src/base-classes/base-circle.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"BaseCircle",(function(){return n}));var s=i("./src/base-classes/svg-tags.ts"),r=function(){return(r=Object.assign||function(t){for(var e,i=1,s=arguments.length;i<s;i++)for(var r in e=arguments[i])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},n=function(){function t(){this.tags=[]}return t.prototype.animateInView=function(){var t=this;this.options.animateInView&&window.addEventListener("scroll",(function(){t.checkAnimation(t.options.id)}))},t.prototype.checkAnimation=function(t){var e=this,i=document.getElementById(t),s=document.getElementById("arc-"+t),r=this.isElementInViewport(i);!i.classList.contains("reanimated")&&r&&(i.classList.add("reanimated"),setTimeout((function(){return e.animate(s)}),250))},t.prototype.isElementInViewport=function(t){var e=t.offsetTop,i=window.scrollY,s=window.innerHeight;return i<e&&i+s>e},t.prototype.drawContainer=function(t){var e=this.getViewBoxParams(),i=e.minX,n=e.minY,o=e.width,a=e.height,c=s.default.addSvg(r({width:"100%",height:"100%",viewBox:i+" "+n+" "+o+" "+a,id:"svg-"+this.options.id,preserveAspectRatio:"xMinYMin meet"},t));this.tags.push({element:c,parentId:this.options.id})},t.prototype.getViewBoxParams=function(){var t=this.options,e=t.foregroundCircleWidth,i=t.backgroundCircleWidth,s=i;e>i&&(s=e);var r=this.size.width,n=this.size.height;return(e>5||i>5)&&(r=this.size.width+1.5*s,n=this.size.height+1.5*s),{minX:0,minY:0,width:r,height:n}},t.prototype.append=function(){this.tags.forEach((function(t){document.getElementById(t.parentId).appendChild(t.element)}))},t.prototype.initialize=function(t,e){this.options=t,this.size=e},t}()},"./src/base-classes/circle-factory.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"CircleFactory",(function(){return o}));var s=i("./src/circle-type/half-circle.ts"),r=i("./src/circle-type/plain-circle.ts"),n=i("./src/circle-type/simple-circle.ts"),o=function(){function t(){}return t.prototype.create=function(t){switch(t.toLowerCase()){case"half":this.circleClass=new s.default;break;case"plain":this.circleClass=new r.default;break;case"simple":this.circleClass=new n.default;break;default:this.circleClass=new n.default}return this.circleClass},t}()},"./src/base-classes/circle.ts":function(t,e,i){"use strict";i.r(e);var s=i("./src/api.ts"),r=i("./src/base-classes/circle-factory.ts"),n=i("./src/base-classes/options.ts"),o=function(){function t(){}return t.getParentSize=function(t){var e=document.getElementById(t),i=e.clientWidth>0?e.clientWidth:200,s=e.clientHeight>0?e.clientHeight:200;return{maxSize:i>s?s:i,height:s,width:i}},t.initializeCircleType=function(e){var i=t.getParentSize(e.id),s=(new r.CircleFactory).create(e.type),o=(new n.default).mergeOptions(e);return s.initialize(o,i),s.drawCircle(),s},t.prototype.newCircle=function(e){return t.initializeCircleType(e),new s.Api(e)},t}();e.default=o},"./src/base-classes/options.ts":function(t,e,i){"use strict";i.r(e);var s=function(){return(s=Object.assign||function(t){for(var e,i=1,s=arguments.length;i<s;i++)for(var r in e=arguments[i])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},r=function(){var t=this;this.defaultOptions={point:!1,pointSize:60,percent:75,foregroundCircleWidth:5,backgroundCircleWidth:15,animation:!0,animationStep:1,noPercentageSign:!1,animateInView:!1,strokeLinecap:"butt",type:"SimpleCircle",textReplacesPercentage:!1},this.mergeOptions=function(e){return s(s({},t.defaultOptions),e)}};e.default=r},"./src/base-classes/svg-tags.ts":function(t,e,i){"use strict";i.r(e);var s=i("./src/helpers/object-helper.ts"),r=i("./src/helpers/svg-tags-helper.ts"),n=function(){function t(){}return t.addSvg=function(e){var i=document.createElementNS(t.namespaceURI,"svg");return e.class="circle-container "+s.default.extractPropertyFromObject(e,"class"),r.default.setAttributes(i,e),i},t.addCircle=function(e){var i=document.createElementNS(t.namespaceURI,"circle");return r.default.setAttributes(i,e),i},t.addArc=function(e){var i=document.createElementNS(t.namespaceURI,"path");return r.default.setAttributes(i,e),i},t.addText=function(e){var i=document.createElementNS(t.namespaceURI,"text");return i.setAttributeNS(null,"text-anchor","middle"),r.default.setAttributes(i,e),i},t.addDefs=function(e){var i=document.createElementNS(t.namespaceURI,"defs"),s=document.createElementNS(t.namespaceURI,"linearGradient");r.default.setAttributes(s,{id:"linearGradient"});var n=document.createElementNS(t.namespaceURI,"stop"),o={offset:"0","stop-color":e.gradientStart};r.default.setAttributes(n,o);var a=document.createElementNS(t.namespaceURI,"stop"),c={offset:"1","stop-color":e.gradientEnd};return r.default.setAttributes(a,c),s.appendChild(n),s.appendChild(a),i.appendChild(s),i},t.namespaceURI="http://www.w3.org/2000/svg",t}();e.default=n},"./src/circle-type/half-circle.ts":function(t,e,i){"use strict";i.r(e);var s,r=i("./src/base-classes/svg-tags.ts"),n=i("./src/helpers/object-helper.ts"),o=i("./src/helpers/style-helper.ts"),a=i("./src/helpers/svg-tags-helper.ts"),c=i("./src/circle-type/simple-circle.ts"),l=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.drawCircle=function(){var t={class:n.default.extractPropertyFromObject(this.additionalCssClasses,"svgContainer")};this.drawContainer(t),this.drawBackgroundCircle(),this.drawForegroundCircle(),this.drawText(),this.append()},e.prototype.drawBackgroundCircle=function(){var t=n.default.extractPropertyFromObject(this.additionalCssClasses,"backgroundCircle"),e=r.default.addArc({id:"bg-arc-"+this.options.id,d:a.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,270,90),class:"background-circle "+t,"stroke-width":this.options.backgroundCircleWidth});this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawForegroundCircle=function(){var t=1.8*this.options.percent,e=n.default.extractPropertyFromObject(this.additionalCssClasses,"foregroundCircle"),i=r.default.addArc({id:"arc-"+this.options.id,class:"foreground-circle "+e,d:a.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,0,t),transform:"rotate(-90, "+this.coordinates.x+", "+this.coordinates.y+")","stroke-width":this.options.foregroundCircleWidth});this.options.animation&&this.animate(i),this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.animate=function(t){o.StyleHelper.animateArc({arc:t,arcParams:{percent:this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius,endAngleGrade:180},animationStep:this.options.animationStep,progressColors:this.options.progressColors},this.options.onAnimationEnd)},e}(c.default);e.default=d},"./src/circle-type/plain-circle.ts":function(t,e,i){"use strict";i.r(e);var s,r=i("./src/base-classes/base-circle.ts"),n=i("./src/base-classes/svg-tags.ts"),o=i("./src/helpers/object-helper.ts"),a=i("./src/helpers/style-helper.ts"),c=i("./src/helpers/svg-tags-helper.ts"),l=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.coordinates={x:0,y:0},e.additionalCssClasses={},e}return l(e,t),e.prototype.initialize=function(e,i){t.prototype.initialize.call(this,e,i);var s=this.size.maxSize;this.coordinates={x:s/2,y:s/2},this.radius=s/2.2,this.options.additionalCssClasses&&(this.additionalCssClasses=this.options.additionalCssClasses),this.animateInView()},e.prototype.drawCircle=function(){this.drawContainer(),this.drawPlainCircle(),this.append()},e.prototype.drawPlainCircle=function(){var t=3.6*this.options.percent,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"foregroundCircle"),i=n.default.addArc({id:"arc-"+this.options.id,class:"foreground-circle "+e,d:c.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,0,t),"stroke-width":this.options.foregroundCircleWidth});this.options.animation&&this.animate(i),this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.animate=function(t){a.StyleHelper.animateArc({arc:t,arcParams:{percent:this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius},animationStep:this.options.animationStep,progressColors:this.options.progressColors},this.options.onAnimationEnd)},e}(r.BaseCircle);e.default=d},"./src/circle-type/simple-circle.ts":function(t,e,i){"use strict";i.r(e);var s,r=i("./src/base-classes/base-circle.ts"),n=i("./src/base-classes/svg-tags.ts"),o=i("./src/helpers/object-helper.ts"),a=i("./src/helpers/style-helper.ts"),c=i("./src/helpers/svg-tags-helper.ts"),l=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.coordinates={x:0,y:0},e.additionalCssClasses={},e}return l(e,t),e.prototype.initialize=function(e,i){t.prototype.initialize.call(this,e,i);var s=this.size.maxSize;this.coordinates={x:s/2,y:s/2},this.radius=s/2.2,this.options.additionalCssClasses&&(this.additionalCssClasses=this.options.additionalCssClasses),this.animateInView()},e.prototype.drawCircle=function(){var t={class:o.default.extractPropertyFromObject(this.additionalCssClasses,"svgContainer")};this.drawContainer(t),this.options.strokeGradient&&this.drawLinearGradient(),this.drawBackgroundCircle(),this.drawForegroundCircle(),this.options.point&&this.drawPoint(),this.options.icon&&this.drawIcon(),this.drawText(),!this.options.textReplacesPercentage&&this.options.text&&this.drawInfoText(),this.append()},e.prototype.drawBackgroundCircle=function(){var t=o.default.extractPropertyFromObject(this.additionalCssClasses,"backgroundCircle"),e=n.default.addCircle({id:"circle-"+this.options.id,class:"background-circle "+t,cx:String(this.coordinates.x),cy:String(this.coordinates.y),r:String(this.radius),"stroke-width":this.options.backgroundCircleWidth});this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawPoint=function(){var t=this.radius/100*this.options.pointSize,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"point"),i=n.default.addCircle({id:"point-"+this.options.id,class:"point-circle "+e,cx:String(this.coordinates.x),cy:String(this.coordinates.y),r:String(t)});this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.drawForegroundCircle=function(){var t=3.6*this.options.percent,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"foregroundCircle"),i={id:"arc-"+this.options.id,class:"foreground-circle "+e,d:c.default.describeArc(this.coordinates.x,this.coordinates.y,this.radius,0,t),"stroke-width":this.options.foregroundCircleWidth,"stroke-linecap":this.options.strokeLinecap};this.options.strokeGradient&&(i.stroke="url(#linearGradient)",i.class="foreground-circle-without-stroke-color "+e);var s=n.default.addArc(i);this.options.animation&&this.animate(s),this.tags.push({element:s,parentId:"svg-"+this.options.id})},e.prototype.animate=function(t,e){a.StyleHelper.animateArc({arc:t,arcParams:{percent:e||this.options.percent,x:this.coordinates.x,y:this.coordinates.y,radius:this.radius},animationStep:this.options.animationStep,progressColors:this.options.progressColors},this.options.onAnimationEnd)},e.prototype.drawIcon=function(){var t=this.options.icon,e=o.default.extractPropertyFromObject(this.additionalCssClasses,"icon"),i=n.default.addText({id:"text-"+this.options.id,x:String(this.coordinates.x),y:String(this.coordinates.y-25),class:"circle-icon fa "+e});i.innerHTML="&#x"+t+";",this.tags.push({element:i,parentId:"svg-"+this.options.id})},e.prototype.drawText=function(){var t=o.default.extractPropertyFromObject(this.additionalCssClasses,"text"),e=n.default.addText({id:"text-"+this.options.id,x:String(this.coordinates.x),y:String(this.coordinates.y),class:"circle-text "+t}),i=this.options.noPercentageSign?"":"%",s=""+this.options.percent+i;this.options.textReplacesPercentage&&this.options.text&&(s=this.options.text),e.textContent=s,this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawInfoText=function(){var t=o.default.extractPropertyFromObject(this.additionalCssClasses,"infoText"),e=n.default.addText({id:"text-"+this.options.id,x:String(this.coordinates.x),y:String(this.coordinates.y+20),class:"circle-info-text "+t});e.textContent=this.options.text,this.tags.push({element:e,parentId:"svg-"+this.options.id})},e.prototype.drawLinearGradient=function(){var t={};t.gradientStart=this.options.strokeGradient[0],t.gradientEnd=this.options.strokeGradient[1];var e=n.default.addDefs(t);this.tags.push({element:e,parentId:"svg-"+this.options.id})},e}(r.BaseCircle);e.default=d},"./src/helpers/object-helper.ts":function(t,e,i){"use strict";i.r(e);var s=function(){function t(){}return t.extractPropertyFromObject=function(t,e){var i="";return t.hasOwnProperty(e)&&t[e]&&(i=t[e]),i},t}();e.default=s},"./src/helpers/style-helper.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"StyleHelper",(function(){return r}));var s=i("./src/helpers/svg-tags-helper.ts"),r=function(){function t(){}return t.animateArc=function(e,i){var r=e.arc,n=e.arcParams,o=e.animationStep,a=e.progressColors,c=n.startAngle?n.startAngle:0,l=n.endAngleGrade?n.endAngleGrade:360,d=this.getMilliseconds(n.ms,n.endAngleGrade),p=Array.isArray(a)&&a.length>0,u=1,h=setInterval((function(e,r,a){var d=l/100*u;s.default.setAttributes(e,{d:s.default.describeArc(n.x,n.y,n.radius,c,d)}),p&&t.updateCircleColor(u,e,a),(u+=o)>r&&(clearInterval(h),"function"==typeof i&&i())}),d,r,n.percent,a)},t.updateCircleColor=function(t,e,i){var r=i.find((function(e){return e.percent===t}));r&&s.default.setAttributes(e,{style:"stroke: "+r.color})},t.getMilliseconds=function(t,e){var i=t||50;return e<=180&&(i/=3),i},t}()},"./src/helpers/svg-tags-helper.ts":function(t,e,i){"use strict";i.r(e);var s=function(){function t(){}return t.setAttributes=function(t,e){for(var i=0,s=Object.entries(e);i<s.length;i++){var r=s[i],n=r[0],o=r[1];t.setAttribute(n,o)}},t.setAttributeNamespace=function(t,e){for(var i=0,s=Object.entries(e);i<s.length;i++){var r=s[i],n=r[0],o=r[1];t.setAttributeNS(null,n,o)}},t.polarToCartesian=function(t,e,i,s){var r=(s-90)*Math.PI/180;return{x:t+i*Math.cos(r),y:e+i*Math.sin(r)}},t.describeArc=function(e,i,s,r,n){var o=t.polarToCartesian(e,i,s,n),a=t.polarToCartesian(e,i,s,r),c=n-r<=180?"0":"1";return["M",o.x,o.y,"A",s,s,0,c,0,a.x,a.y].join(" ")},t}();e.default=s},"./src/index.ts":function(t,e,i){"use strict";i.r(e),i.d(e,"newCircle",(function(){return r}));i("./styles/main.scss");var s=i("./src/base-classes/circle.ts");function r(t){return(new s.default).newCircle(t)}},"./styles/main.scss":function(t,e,i){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,